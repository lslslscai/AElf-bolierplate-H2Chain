/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/TJULab.GetSetContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/TJULab.GetSetContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "TJULab.GetSetContract";

// the contract definition: a gRPC service definition.
service GetSetContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "TJULab.GetSetContract.GetSetContractState";

    
    rpc Get (GetInput) returns (GetReturn) {
        option (aelf.is_view) = true;
    }
    rpc Set (SetInput) returns (google.protobuf.Empty) { }
    
    rpc SetContract (SetContractInput) returns (google.protobuf.Empty) { }
    rpc GetContract (google.protobuf.StringValue) returns (google.protobuf.StringValue) { }
    
    rpc TestEnvInitialize(google.protobuf.StringValue) returns (google.protobuf.Empty){ }
    
    rpc Test(google.protobuf.Empty) returns (google.protobuf.BoolValue){
        option (aelf.is_view) = true;
    }
}

message GetInput {
    string className = 1;
    bool contextFlag = 2;
}
message SetInput {
    string className = 1;
    string jsonString = 2;
}
// store author address and contract's name 
message Author_Contract_Pair {
    aelf.Address address = 1;
    string className = 2;
}
// a list to store contracts' name
message ContractList {
    repeated string contract = 1;
}
// a list to store contracts' state as json string
message StateList {
    repeated string state = 1;
}

message SetContractInput{
    string paramsHash=1;
    string paramsJson=2;
}

message TransactionContext{
    string SenderString = 1;
    aelf.Address Sender = 2;

    string SelfString = 3;
    aelf.Address Self = 4;

    int32 ChainID = 5;
    int64 currentBlockHeight = 6;
    google.protobuf.Timestamp currentBlockTime = 7;

    string previousBlockHashString = 8;
    aelf.Hash previousBlockHash = 9;
}

message GetReturn {
    string state = 1;
    TransactionContext context = 2;
}

